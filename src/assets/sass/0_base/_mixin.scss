
//============================================
// clearfix
//============================================
@mixin clear {
  *zoom: 1;
  &:after {
    display: block;
    content: "";
    clear: both;
  }
}



//============================================
// Hiệu ứng đổ bóng
//============================================
@mixin effect_shadow_style{
  position: relative;

  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3), 0 0 40px rgba(0, 0, 0, 0.1) inset;

  &::after {
    right: 10px;
    left: auto;

    transform: skew(8deg) rotate(3deg);
  }
  &::after,
  &::before {
    content: "";
    position: absolute;
    z-index: -1;

    box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
    top: 50%;
    bottom: 0;
    left: 10px;
    right: 10px;
    -moz-border-radius: 100px / 10px;
    border-radius: 100px / 10px;
  }
}
@mixin effect_shadow_style_2 {
  position: relative;
  &::before {
    content: "";
    position: absolute;
    z-index: -1;

    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    top: 0px;
    bottom: 0px;
    left: 0px;
    right: 0px;
    -moz-border-radius: 100px / 0px;
    border-radius: 100px / 0px;
  }
  &::after {
    content: "";
    right: 10px;
    left: auto;

    transform: skew(8deg) rotate(3deg);
  }
}
//============================================
// text
//============================================

@mixin text($f_size, $color) {
    font-size: $f_size;
    font-weight: normal;
    font-stretch: normal;
    font-style: normal;
    line-height: normal;
    letter-spacing: normal;
    color: $color;
}
@mixin box-shadow () {
  // box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);
  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.08), 0 2px 2px 0 rgba(0, 0, 0, 0.09), 0 1px 5px 0 rgba(0, 0, 0, 0.06);
}


@mixin m($t : 1, $r: null, $b: null, $l: null) {
  @if ($t and $r and $b and $l) {

    @include mt($t);
    @include mr($r);
    @include mb($b);
    @include ml($l);

  } @else if ($t and $r and $b and not $l) {

    @include mt($t);
    @include mx($r);
    @include mb($b);

  } @else if ($t and $r and not $b and not $l) {

    @include my($t);
    @include mx($r);

  } @else if ($t and not $r and not $b and not $l) {

    @if ($t == 'auto') {
      @include my(0); //be explicit about what the browser does
      @include mx(auto);
    } @else {
      @include my($t);
      @include mx($t);
    }

  } @else {
    @error "m(#{$t}, #{$r}, #{$b}, #{$l}): Invalid parameters. Expects m($size), m($y, $x), m($t, $x, $b) or m($t, $r, $b, $l)"
  }
}

@mixin mx($r : 1, $l : null) {
  @if ($r and $l) {
    @include mr($r);
    @include ml($l);
  } @else if ($r and not $l) {
    @include mr($r);
    @include ml($r);
  } @else {
    @error "mx(#{$r}, #{$l}): Invalid parameters. Expects mx($size) or mx($r, $l)"
  }
}

@mixin my($t : 1, $b : null) {
  @if ($t and $b) {
    @include mt($t);
    @include mb($b);
  } @else if ($t and not $b) {
    @include mt($t);
    @include mb($t);
  } @else {
    @error "my(#{$t}, #{$b}): Invalid parameters. Expects my($size) or my($t, $b)"
  }
}

@mixin ml($size : 1) {
  @if ($size == 'auto') {
    margin-left: auto #{if($spacing-important, '!important', '')};
  } @else {
    margin-left: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
  }
}

@mixin mt($size : 1) {
  margin-top: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}

@mixin mr($size : 1) {
  @if ($size == 'auto') {
    margin-right: auto #{if($spacing-important, '!important', '')};
  } @else {
    margin-right: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
  }
}

@mixin mb($size : 1) {
  margin-bottom: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}

@mixin p($t : 1, $r: null, $b: null, $l: null) {
  @if ($t and $r and $b and $l) {

    @include pt($t);
    @include pr($r);
    @include pb($b);
    @include pl($l);

  } @else if ($t and $r and $b and not $l) {

    @include pt($t);
    @include px($r);
    @include pb($b);

  } @else if ($t and $r and not $b and not $l) {

    @include py($t);
    @include px($r);

  } @else if ($t and not $r and not $b and not $l) {

    @include py($t);
    @include px($t);

  } @else {
    @error "p(#{$t}, #{$r}, #{$b}, #{$l}): Invalid parameters. Expects p($size), p($y, $x), p($t, $x, $b) or p($t, $r, $b, $l)"
  }
}

@mixin px($r : 1, $l : null) {
  @if ($r and $l) {
    @include pr($r);
    @include pl($l);
  } @else if ($r and not $l) {
    @include pr($r);
    @include pl($r);
  } @else {
    @error "px(#{$r}, #{$l}): Invalid parameters. Expects px($size) or px($r, $l)"
  }
}

@mixin py($t : 1, $b : null) {
  @if ($t and $b) {
    @include pt($t);
    @include pb($b);
  } @else if ($t and not $b) {
    @include pt($t);
    @include pb($t);
  } @else {
    @error "py(#{$t}, #{$b}): Invalid parameters. Expects py($size) or py($t, $b)"
  }
}

@mixin pl($size : 1) {
  padding-left: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}

@mixin pt($size : 1) {
  padding-top: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}

@mixin pr($size : 1) {
  padding-right: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}

@mixin pb($size : 1) {
  padding-bottom: map-get($spacing-sizes, $size) #{if($spacing-important, '!important', '')};
}
